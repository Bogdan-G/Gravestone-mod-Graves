/*
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
*/

// for people who want stable
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.1"
}

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

version = "3.0.0"
group = "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GraveStone"

minecraft {
    version = "1.8-11.14.3.1513"
    runDir = "idea"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_nodoc_20141130"
}

ext.apiGravestone = "./api/gravestone"
ext.apiSophisticatedWolves = "./api/sophisticated_wolves"
ext.apiForestry = "./api/forestry"
ext.apiBaubles = "./api/baubles"

sourceSets {
    main {
        java {
            srcDir project.apiGravestone
            srcDir project.apiSophisticatedWolves
            srcDir project.apiForestry
            srcDir project.apiBaubles
        }
    }
}

dependencies {
//    compile files("external_libs/GalacticraftCore-1.7-3.0.7.252.jar")
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

jar {
    exclude('baubles/**')
    exclude('forestry/**')
    exclude('sophisticated_wolves/**')
    exclude('mariculture/**')
    exclude('micdoodle8/**')
    exclude('tconstruct/**')
    //TODO exclude Thaumcraft API
    exclude('**/*.db')
    exclude('assets/gravestone/techne_models/**')
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
//
//runClient {
//    if (project.hasProperty('mcUsername')) {
//        args "--username=" + project.mcUsername
//    }
//    if (project.hasProperty('mcPassword')) {
//        args "--password=" + project.mcPassword
//    }
//}
//
//debugClient {
//    if (project.hasProperty('mcUsername')) {
//        args "--username=" + project.mcUsername
//    }
//    if (project.hasProperty('mcPassword')) {
//        args "--password=" + project.mcPassword
//    }
//}